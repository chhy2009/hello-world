<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtf_1_1cudaEvent" kind="class" language="C++" prot="public">
    <compoundname>tf::cudaEvent</compoundname>
    <includes refid="cuda__stream_8hpp" local="no">cuda_stream.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1cudaEvent_1a3d6f0d82703a9083452e5c140fa24aff" prot="private" static="no" mutable="no">
        <type>cudaEvent_t</type>
        <definition>cudaEvent_t tf::cudaEvent::_event</definition>
        <argsstring></argsstring>
        <name>_event</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="561" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="561" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1cudaEvent_1ad0b23cb864f0c7acee306f7fe49a3c23" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaEvent::cudaEvent</definition>
        <argsstring>(cudaEvent_t event)</argsstring>
        <name>cudaEvent</name>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>constructs an RAII-styled object from the given CUDA event </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="497" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="497" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1a2865fd7388ef1725e1b59dd3a201f503" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaEvent::cudaEvent</definition>
        <argsstring>()</argsstring>
        <name>cudaEvent</name>
        <briefdescription>
<para>constructs an RAII-styled object for a new CUDA event </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="503" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="503" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1ad76f10855d56f2706a3d9ed93e47a2e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::cudaEvent::cudaEvent</definition>
        <argsstring>(const cudaEvent &amp;)=delete</argsstring>
        <name>cudaEvent</name>
        <param>
          <type>const <ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> &amp;</type>
        </param>
        <briefdescription>
<para>disabled copy constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1aa63d15089884744a802554352c50d2b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaEvent::cudaEvent</definition>
        <argsstring>(cudaEvent &amp;&amp;rhs)</argsstring>
        <name>cudaEvent</name>
        <param>
          <type><ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="514" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="514" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1ac1510f29e6a9cf57933c33feda99735a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaEvent::~cudaEvent</definition>
        <argsstring>()</argsstring>
        <name>~cudaEvent</name>
        <briefdescription>
<para>destructs the CUDA event </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="521" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="521" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1adfcc20681dd240a017a2fafe6cb4d4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> &amp;</type>
        <definition>cudaEvent&amp; tf::cudaEvent::operator=</definition>
        <argsstring>(const cudaEvent &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> &amp;</type>
        </param>
        <briefdescription>
<para>disabled copy assignment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1a15672eb08ad6647b84d69e399a9f7677" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> &amp;</type>
        <definition>cudaEvent&amp; tf::cudaEvent::operator=</definition>
        <argsstring>(cudaEvent &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move assignment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="533" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="533" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1a123fe336965738c7bd8027512c052de6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::cudaEvent::operator cudaEvent_t</definition>
        <argsstring>() const</argsstring>
        <name>operator cudaEvent_t</name>
        <briefdescription>
<para>implicit conversion to the native CUDA event (cudaEvent_t) </para>        </briefdescription>
        <detaileddescription>
<para>Returns the underlying event of type <computeroutput>cudaEvent_t</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="545" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="545" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1cudaEvent_1a827ae06b6e7ef937740772c7ee55f8fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::cudaEvent::reset</definition>
        <argsstring>(cudaEvent_t event=nullptr)</argsstring>
        <name>reset</name>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>replaces the managed event </para>        </briefdescription>
        <detaileddescription>
<para>Destructs the managed event and resets it to the given event. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="554" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="554" bodyend="557"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>alias of per-thread event pool type </para>    </briefdescription>
    <detaileddescription>
<para>per-thread cuda event pool <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
class to create an RAII-styled guard of event acquisition</para><para>Sample usage:</para><para><programlisting filename=".cpp"><codeline><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>tf::cudaScopedPerThreadEvent<sp/>event(1);<sp/><sp/>//<sp/>acquires<sp/>a<sp/>event<sp/>on<sp/>device<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>use<sp/>event<sp/>as<sp/>a<sp/>normal<sp/>cuda<sp/>event<sp/>(cudaEvent_t)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cudaStreamWaitEvent(stream,<sp/>event);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//}<sp/><sp/>//<sp/>leaving<sp/>the<sp/>scope<sp/>releases<sp/>the<sp/>event<sp/>back<sp/>to<sp/>the<sp/>pool<sp/>on<sp/>device<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
</programlisting></para><para>The scoped per-thread event is primarily used by <ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref> to execute CUDA tasks (e.g., <ref refid="classtf_1_1cudaFlow" kindref="compound">tf::cudaFlow</ref>, <ref refid="classtf_1_1cudaFlowCapturer" kindref="compound">tf::cudaFlowCapturer</ref>).</para><para>cudaScopedPerThreadEvent is non-copyable. <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
constructs a scoped event under the given device</para><para>The constructor acquires a event from a per-thread event pool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>device context of the requested event <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
constructs a scoped event under the current device.</para></parameterdescription>
</parameteritem>
</parameterlist>
The constructor acquires a event from a per-thread event pool. <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
destructs the scoped event guard</para><para>The destructor releases the event to the per-thread event pool. <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
implicit conversion to the native CUDA event (cudaEvent_t) <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
disabled copy constructor <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
default move constructor <linebreak/>
<linebreak/>
<linebreak/>
disabled copy assignment <linebreak/>
<linebreak/>
default move assignment <linebreak/>
</para><para>class to create a CUDA event in an RAII-styled wrapper</para><para>A <ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> object is an RAII-styled wrapper over a native CUDA stream (<computeroutput>cudaEvent_t</computeroutput>). A <ref refid="classtf_1_1cudaEvent" kindref="compound">cudaEvent</ref> object is move-only. </para>    </detaileddescription>
    <location file="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" line="490" column="1" bodyfile="/home/twhuang/Code/taskflow/taskflow/cuda/cuda_stream.hpp" bodystart="490" bodyend="562"/>
    <listofallmembers>
      <member refid="classtf_1_1cudaEvent_1a3d6f0d82703a9083452e5c140fa24aff" prot="private" virt="non-virtual"><scope>tf::cudaEvent</scope><name>_event</name></member>
      <member refid="classtf_1_1cudaEvent_1ad0b23cb864f0c7acee306f7fe49a3c23" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>cudaEvent</name></member>
      <member refid="classtf_1_1cudaEvent_1a2865fd7388ef1725e1b59dd3a201f503" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>cudaEvent</name></member>
      <member refid="classtf_1_1cudaEvent_1ad76f10855d56f2706a3d9ed93e47a2e9" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>cudaEvent</name></member>
      <member refid="classtf_1_1cudaEvent_1aa63d15089884744a802554352c50d2b9" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>cudaEvent</name></member>
      <member refid="classtf_1_1cudaEvent_1a123fe336965738c7bd8027512c052de6" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>operator cudaEvent_t</name></member>
      <member refid="classtf_1_1cudaEvent_1adfcc20681dd240a017a2fafe6cb4d4dd" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>operator=</name></member>
      <member refid="classtf_1_1cudaEvent_1a15672eb08ad6647b84d69e399a9f7677" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>operator=</name></member>
      <member refid="classtf_1_1cudaEvent_1a827ae06b6e7ef937740772c7ee55f8fa" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>reset</name></member>
      <member refid="classtf_1_1cudaEvent_1ac1510f29e6a9cf57933c33feda99735a" prot="public" virt="non-virtual"><scope>tf::cudaEvent</scope><name>~cudaEvent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
